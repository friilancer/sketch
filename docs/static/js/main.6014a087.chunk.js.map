{"version":3,"sources":["components/shapes/shapes.js","components/shapeCanvas/shapeCanvas.js","components/shapePicker/shapePicker.js","App.js","reportWebVitals.js","index.js"],"names":["Circle","radius","color","data-testid","className","xmlns","viewBox","stroke","fill","strokeWidth","cx","cy","r","MiniCircle","Square","length","x","y","width","height","MiniSquare","Rectangle","breadth","MiniRectangle","ShapeCanvas","shapesHistory","shape","MiniShapeCanvas","ShapePicker","drawnShape","useState","setShape","setLength","setBreadth","setRadius","setColor","dimensions","setDimensions","toggle","onSubmit","e","preventDefault","reset","htmlFor","id","name","value","onChange","target","type","placeholder","onClick","slice","map","index","getWindowDimensions","window","innerWidth","innerHeight","App","setShapesHistory","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","getShapes","JSON","parse","localStorage","getItem","setItem","stringify","newShape","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6014a087.chunk.js","sourcesContent":["import React from 'react';\r\nimport './shapes.css'\r\n\r\n\r\n//Circle component\r\nexport const Circle = ({radius, color}) => {\r\n\r\n  if(radius > 250) radius = 250;\r\n  \r\n  return (\r\n        <div data-testid=\"circle\" className=\"canvas\">\r\n          <svg className=\"mainDiagram\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\">\r\n            <g stroke={color} fill={color}>\r\n              <circle strokeWidth=\"1\" className=\"strokeAnimation\" cx=\"250\" cy=\"250\" r={radius}/>\r\n            </g>\r\n          </svg>\r\n        </div>\r\n  );\r\n}\r\n\r\n//Mock circle component\r\nexport const MiniCircle = ({radius, color}) => {\r\n  return (\r\n        <div data-testid=\"miniCircle\" className=\"minicanvas\">\r\n          <svg className=\"miniDiagram\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 30 30\">\r\n            <g fill={color}>\r\n              <circle cx=\"15\" cy=\"15\" r={15}/>\r\n            </g>\r\n          </svg>\r\n        </div>\r\n  );\r\n}\r\n      \r\n//Square component  \r\nexport const Square = ({length, color}) => { \r\n\r\n  if(length > 500) length = 450;\r\n  let x = (500 - length) / 2;\r\n  return (\r\n        <div data-testid=\"square\" className=\"canvas\">\r\n          <svg className=\"mainDiagram\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\">\r\n            <g stroke={color} fill={color}>\r\n              <rect strokeWidth=\"1\" className=\"strokeAnimation\" x={x} y={x} width={length} height={length} />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n  );\r\n}\r\n\r\n//Mock square component\r\nexport const MiniSquare = ({length, color}) => { \r\n  return (\r\n        <div data-testid=\"miniSquare\" className=\"minicanvas\">\r\n          <svg className=\"miniDiagram\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 30 30\">\r\n            <g fill={color}>\r\n              <rect x={0} y={0} width={30} height={30} />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n  );\r\n}\r\n\r\n//Rectangle component \r\nexport const Rectangle = ({length, breadth, color}) => {\r\n\r\n  if(length > 500 || breadth > 500){\r\n    if(length > breadth){\r\n\r\n      breadth = 100;\r\n      length = 400;\r\n\r\n    } else {\r\n      length =  100;\r\n      breadth = 400;\r\n    }\r\n  }\r\n\r\n  let x = (500 - length) / 2;\r\n  let y = (500 - breadth) / 2;\r\n  return (\r\n        <div data-testid=\"rectangle\" className=\"canvas\">\r\n          <svg className=\"mainDiagram\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 500 500\">\r\n            <g stroke={color} fill={color}>\r\n              <rect strokeWidth=\"1\" className=\"strokeAnimation\" x={x} y={y} width={length} height={breadth} />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n  );  \r\n}\r\n\r\n//Mock rectangle component\r\nexport const MiniRectangle = ({color, length, breadth }) => {\r\n  return (\r\n        <div data-testid=\"miniRectangle\" className=\"minicanvas\">\r\n          <svg className=\"miniDiagram\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 30 30\">\r\n            <g fill={color}>\r\n              <rect x={0} y={7} width={30} height={15}  />\r\n            </g>\r\n          </svg>\r\n        </div>\r\n  );  \r\n}\r\n\r\n","import React from 'react';\r\nimport './shapeCanvas.css';\r\nimport {Circle, Square, Rectangle, MiniCircle, MiniSquare, MiniRectangle} from '../shapes/shapes'\r\n\r\n//React component where drawn shapes would be displayed\r\nexport const ShapeCanvas = ({shapesHistory = {\r\n  shape : 'circle' , \r\n  radius: 0,\r\n  length: 0,\r\n  breadth: 0,\r\n  color: ''\r\n }}) => {\r\n\r\n  const {shape, radius, length, breadth, color} = shapesHistory;\r\n\r\n    return(\r\n    <div data-testid=\"shapeCanvas\" className=\"canvasheet\">\r\n      <div className=\"text-center\">\r\n      \r\n      {\r\n        radius > 250 || length > 500 || breadth > 500 ? \r\n        <h6> Your drawing seems to have exceeded our canvas...scaled it perfectly for you </h6> : '' \r\n      }\r\n      <h3>Draw something</h3>\r\n      </div>\r\n      {shape === 'circle' && <Circle radius={radius} color={color} />}\r\n      {shape === 'square' && <Square length={length} color={color} />}\r\n      {shape === 'rectangle' && <Rectangle length={length} breadth={breadth} color={color} />}\r\n    </div>\r\n  );\r\n}\r\n\r\n//Shape component for displaying drawn shapes as icons\r\nexport const MiniShapeCanvas = ({shape, radius, length, breadth, color}) => {  \r\n  \r\n  return(\r\n    <div data-testid=\"miniShapeCanvas\">\r\n      {shape === 'circle' && <MiniCircle color={color} radius={radius}/>}\r\n      {shape === 'square' && <MiniSquare color={color} length={length} />}\r\n      {shape === 'rectangle' && <MiniRectangle color={color} length={length} breadth={breadth} />}\r\n    </div>\r\n  );\r\n}","import React, { useState, Fragment } from 'react';\r\nimport './shapePicker.css';\r\nimport { MiniShapeCanvas } from '../shapeCanvas/shapeCanvas';\r\n\r\nconst ShapePicker = ({shapesHistory, drawnShape}) => {\r\n\r\n    const [shape, setShape] = useState(\"square\");\r\n    const [length, setLength] = useState('');\r\n    const [breadth, setBreadth] = useState('');\r\n    const [radius, setRadius] = useState('');\r\n    const [color, setColor] = useState('#000000');\r\n    \r\n    const [dimensions, setDimensions] = useState({\r\n      length : true,\r\n      breadth: false,\r\n      radius: false\r\n    })\r\n\r\n    //Toggle input on forms to be shown based on selected shape\r\n    const toggle = (shape) => {\r\n      if(shape === 'square') setDimensions({\r\n        length : true,\r\n        breadth: false,\r\n        radius: false\r\n      })\r\n\r\n      if(shape === 'rectangle') setDimensions({\r\n        length : true,\r\n        breadth: true,\r\n        radius: false,\r\n      })\r\n\r\n      if(shape === 'circle') setDimensions({\r\n        length : false,\r\n        breadth: false,\r\n        radius: true\r\n      })\r\n    }\r\n\r\n    const handleLengthChange = (e) => setLength(e.target.value);\r\n    const handleBreadthChange = (e) => setBreadth(e.target.value);\r\n    const handleRadiusChange = (e) => setRadius(e.target.value);\r\n    const handleColorChange = (e) => setColor(e.target.value)\r\n    const handleShapeChange = (e) => {\r\n      setShape(e.target.value);\r\n      toggle(e.target.value);\r\n    }\r\n\r\n    //Reset values to defaults after a shape has been drawn\r\n    const reset = (shape) => {\r\n      setShape(shape);\r\n      toggle(shape);\r\n      setRadius('');\r\n      setBreadth('');\r\n      setLength('');\r\n      setColor('#000000'); \r\n    }\r\n\r\n    const updateShapes = (shape, length, breadth, radius, color) => {\r\n        drawnShape([{\r\n          shape,\r\n          length,\r\n          breadth,\r\n          radius,\r\n          color\r\n          },\r\n          ...shapesHistory\r\n        ]);\r\n    }\r\n\r\n    const clearShapes = () => drawnShape([]);\r\n    const onSubmit = (e) => {\r\n\r\n      e.preventDefault();\r\n      if(radius || length || breadth){\r\n        drawnShape([{\r\n          shape,\r\n          length,\r\n          breadth,\r\n          radius,\r\n          color\r\n          },\r\n          ...shapesHistory\r\n        ]);\r\n        reset(shape);\r\n      }\r\n    }\r\n  return (\r\n    <>\r\n      <div data-testid=\"shapePicker\" className=\"controller\">\r\n        <h1> Set to draw... </h1>\r\n        <form onSubmit={onSubmit}>\r\n        <label htmlFor=\"shapes\"> Pick a shape </label>\r\n        <select id=\"shapes\" name=\"shapes\" value={shape} onChange={handleShapeChange}>\r\n          <option value=\"square\">Square</option>\r\n          <option value=\"circle\">Circle</option>\r\n          <option value=\"rectangle\">Rectangle</option>\r\n        </select>\r\n\r\n        {\r\n          dimensions.length &&\r\n          <div>\r\n            <label htmlFor=\"length\">\r\n            Length of shape\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"length\"\r\n              name=\"length\"\r\n              placeholder=\"length...\"\r\n              value={length}\r\n              onChange={handleLengthChange}\r\n            />\r\n          </div>\r\n        }\r\n        { dimensions.breadth && \r\n          <div>\r\n            <label htmlFor=\"breadth\">\r\n            Breadth of shape\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"breadth\"\r\n              name=\"breadth\"\r\n              placeholder=\"breadth...\"\r\n              value={breadth}\r\n              onChange={handleBreadthChange}\r\n            />\r\n          </div>\r\n        }\r\n        {\r\n          dimensions.radius && \r\n          <div>\r\n            <label htmlFor=\"radius\">\r\n            Radius of shape\r\n            </label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"radius\"\r\n              id=\"radius\"\r\n              placeholder=\"radius...\"\r\n              value={radius}\r\n              onChange={handleRadiusChange}\r\n            />\r\n          </div>\r\n        }\r\n        <div>\r\n          <label htmlFor=\"color\"> Pick a color </label>\r\n          <input\r\n            type=\"color\"\r\n            name=\"color\"\r\n            id=\"color\"\r\n            value={color}\r\n            onChange={handleColorChange}\r\n          />\r\n        </div>\r\n\r\n          <button className=\"draw\"> Draw </button>\r\n        </form>\r\n        <button className=\"clear\" onClick={clearShapes}> Clear shapes history </button>\r\n\r\n        <div>\r\n          {!shapesHistory[0] ? <h5> You are yet to draw any shape </h5> : \r\n            shapesHistory.length > 20 ? \r\n            <h5> You've drawn {shapesHistory.length} shapes. Here are the 20 most recent shapes you've drawn </h5> : <h5> {shapesHistory.length} most recent shapes you've drawn </h5>}\r\n          <div className=\"drawnShapesDisplay\">\r\n            {shapesHistory.length > 20 ? \r\n              shapesHistory.slice(0, 19).map(({shape, color, length, radius, breadth}, index) => \r\n              <MiniShapeCanvas\r\n                key={index}\r\n                shape={shape}\r\n                color={color}\r\n                radius={radius}\r\n                length={length}\r\n                breadth={breadth}\r\n              />\r\n            ) :\r\n              shapesHistory.map(({shape, color, length, radius, breadth}, index) => \r\n              <MiniShapeCanvas\r\n                key={index}\r\n                shape={shape}\r\n                color={color}\r\n                radius={radius}\r\n                length={length}\r\n                breadth={breadth}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </>\r\n    );\r\n}\r\n\r\nexport default ShapePicker","import React, { Fragment, useState, useEffect } from 'react';\nimport './App.css';\nimport ShapePicker from './components/shapePicker/shapePicker';\nimport { ShapeCanvas } from './components/shapeCanvas/shapeCanvas';\n\nconst getWindowDimensions = () => {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n    width,\n    height\n  };\n}\n\nconst useWindowDimensions = () => {\n  const [dimensions, setDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  },[])\n\n  return dimensions;\n}\n\n\nconst App = () => {\n    \n  //Instantiate empty array that'll contain data of shapes drawn\n  const [shapesHistory, setShapesHistory] = useState([]);\n\n  //Get window dimensions\n  const {height, width} = useWindowDimensions();\n\n  //When the application mounts, load previously drawn shapes if any\n  useEffect(() => {\n    const getShapes = JSON.parse(localStorage.getItem('shapes'));\n\n    getShapes ? setShapesHistory([...getShapes]) : setShapesHistory([]);\n  }, [])\n\n  \n\n  //Update shapes drawn on localStorage\n  useEffect(() =>  {\n\n    localStorage.setItem('shapes', JSON.stringify(shapesHistory));\n\n  }, [shapesHistory])\n\n \n  return (\n    <>\n      {\n      width > 750 && height > 550 ? \n\n      <div className=\"layout\"> \n      <ShapePicker\n        shapesHistory={shapesHistory}\n        drawnShape = {(newShape) => setShapesHistory(newShape)}      \n      />\n      <ShapeCanvas \n        shapesHistory={shapesHistory[0]}\n      />      \n    </div>\n\n    : \n\n    <div className=\"errorDisplay\">\n      <h2>Your screen size seems smaller than our canvas...</h2>\n    </div>\n\n    }\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}